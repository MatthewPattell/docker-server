user                nginx;
worker_processes    auto;

pid                 /var/run/nginx.pid;

env REDIS_IP;
env REDIS_PORT;
env REDIS_PASSWORD;
env REDIS_DATABASE;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections  4000;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;

    accept_mutex off;
}

http {
    lua_package_path "/etc/nginx/lua_lib/?.lua;;";
    lua_shared_dict  ip_blacklist 10m;

    ##
    # SET GLOBAL VARIABLES
    ##

    # $ENVIRONMENT will be replaced in init-nginx.sh
    map $ENVIRONMENT $PROJECT_ENVIRONMENT {
        PROD    PROD;
        DEV     DEV;
        default DEV;
    }

    # exclude response from log
    map $status $loggable {
        200     1;
        503     1;
        502     1;
        500     1;
        404     1;
        403     1;
        default 0;
    }

    # exclude assets url
    map $request_uri $loggable_filtered {
        ~*/assets/* 0;
        ~*.js$      0;
        ~*.css$     0;
        ~*.cur$     0;
        default     $loggable;
    }

    # set correct scheme (fix forwarded with AWS ELB)
    map $http_x_forwarded_proto $real_scheme {
        http    http;
        https   https;
        default $scheme;
    }

    # for webp support with fallback
    map $http_accept $webp_ext {
        default "";
        "~image\/webp" ".webp";
    }
    map $uri $file_ext {
        default "";
        "~(\.\w+)$" $1;
    }

    # $NGINX_LIMIT_KEY will be replaced in init-nginx.sh
    map $http_limit_key $limit_target {
        $NGINX_LIMIT_KEY "";
        default $binary_remote_addr;
    }
    ##
    # END SET ENVIRONMENT
    ##

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    log_format  main    'Code:           [$status]'
                        'IP:             [$remote_addr]'
                        'Remote-User:    [$remote_user]'
                        'Time:           [$time_local]'
                        'Request:        [$request]'
                        'Bytes-send:     [$body_bytes_sent]'
                        'Referrer:       [$http_referer]'
                        'User-Agent:     [$http_user_agent]'
                        'Forwarded-for:  [$http_x_forwarded_for]'
                        'HeaderGuestId:  [$http_guestid]'
                        'CookieGuestId:  [$cookie_GuestId]';

    sendfile            on;
    sendfile_max_chunk  512k;
    tcp_nopush          on;
    tcp_nodelay         on;
    merge_slashes       on;
    keepalive_timeout   65;
    # Hide nginx version
    server_tokens       off;
    rewrite_log         on;

    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size     128k;
    client_max_body_size        10m;
    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 4 256k;
    # Send the client a "request timed out" if the body is not loaded by this time.
    client_body_timeout         10;

     # Allow the server to close the connection after a client stops responding.
    reset_timedout_connection   on;
    # If the client stops reading data, free up the stale client connection after this much time.
    send_timeout                2;

    ##
    # Protection
    ##

    # limit the number of connections per single IP
    limit_conn_zone $limit_target zone=conn_limit_per_ip:10m;

    # limit the number of requests for a given session
    limit_req_zone  $limit_target zone=req_limit_per_ip:10m rate=5r/s;

    # Proxy
    proxy_set_header X-Real-IP       $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host            $http_host;

    ##
    # Real IP
    ##

    # ELB,Docker vpc
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 0.0.0.0/0;

    real_ip_header    X-Forwarded-For;
    real_ip_recursive on;

    ##
    # Logging Settings
    ##

    access_log  /var/log/nginx/access.log main if=$loggable_filtered;
    error_log   /var/log/nginx/error.log  warn;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache             max=200000 inactive=20s;
    open_file_cache_valid       30s;
    open_file_cache_min_uses    2;
    open_file_cache_errors      on;

    ##
    # Gzip Settings
    ##

    gzip                on;
    gzip_disable        "msie6";
    gzip_vary           on;
    gzip_proxied        any;
    gzip_comp_level     6;
    gzip_min_length     100;
    gzip_buffers        16 8k;
    gzip_http_version   1.1;
    gzip_types          text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    ##
    # Brotli Settings
    ##

    brotli on;
    brotli_comp_level 6;
    brotli_static on;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    # Resolver
    resolver            8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout    5s;

    # Fast-CGI cache
    fastcgi_cache_path /tmp/nginx/cache levels=1:2 keys_zone=fastcgi_cache_db:256m max_size=256m inactive=60m;
    fastcgi_cache_key "$scheme|$request_method|$host|$request_uri";

    # Hosts
    include /etc/nginx/conf-dynamic.d/*.conf;
    include /etc/nginx/conf.d/*.conf;
}
