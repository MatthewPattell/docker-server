# ENVIRONMENT (PROD/DEV)
PROJECT_ENVIRONMENT=DEV

# PROJECT
PROJECT_NAME=your_name
COMPOSE_PROJECT_NAME=${PROJECT_NAME}
PACKAGE_DOCKER_FOLDER=${VENDOR_DIR}/docker
PACKAGE_DOCKER_FOLDER_CONTAINER=/docker-server
PROJECT_ROOT_CONTAINER=/var/www/html
# you can use ${empty} for recompile environment (sample: ${empty}/var/www/html)
PROJECT_ROOT=${VENDOR_PARENT_DIR} # /drive/you_site_folder
PROJECT_DOCKER_FOLDER=${PACKAGE_DOCKER_FOLDER}
PROJECT_DOCKER_FOLDER_CONTAINER=${PROJECT_ROOT_CONTAINER}/docker
RUN_SERVER_COMPOSER=0
DEFAULT_DETACHED_MODE=-d
# use only for PROD (or generate env without run server)
#PROJECT_ENV_PATH_FORCE=/custom/path
# use !! for vendor path
SERVICES="-f !!docker-compose.yml -f !!docker-compose.redis.yml -f !!docker-compose.mysql.yml -f !!docker-compose.dev.yml"

# SERVER
SERVER_HTTP_PORT=80
SERVER_SSL_PORT=443

# MYSQL
MYSQL_HOST=mysql
MYSQL_PORT=3306
MYSQL_ROOT_PASSWORD=your_credentials
MYSQL_DATABASE=your_credentials
MYSQL_USER=your_credentials
MYSQL_PASSWORD=your_credentials

# REDIS
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=your_credentials
REDIS_DATABASE=1

# SSH
SSH_PORT=22
SSH_PASSWORD=your_credentials

# PHP FPM
DEBUG_PORT=9000
PHP_IDE_CONFIG="serverName=${PROJECT_NAME}"
XDEBUG_CONFIG="default_enable=0 remote_host=172.18.0.1 remote_enable=0 profiler_enable_trigger=0 remote_port=$DEBUG_PORT"

# IMAGES REPOSITORIES
NGINX_REPOSITORY=matthewpatell/universal-docker-nginx:2.1
SERVER_REPOSITORY=matthewpatell/universal-docker-server:2.2

# DOMAINS
#DOMAIN_API=api.sampledomain.com
#DOMAIN_COVERAGE=coverage.sampledomain.com
#DOMAIN_OPCACHE=opcache.sampledomain.com
#DOMAIN_COMMON=sampledomain.com

# SSL DOMAINS
#SSL_DOMAINS[0]="admin@sampledomain.com :api.sampledomain.com coverage.sampledomain.com opcache.sampledomain.com sampledomain.com:"

# OTHER CONFIGS
# https://github.com/settings/tokens
GIT_AUTHTOKEN=you_token

# TELEGRAM NOTIFICATIONS CI (only tests)
#TELEGRAM_BOT_TOKEN=
#TELEGRAM_CHAT_ID=

# AWS COMMANDS (-SERVICES- will be replaced)
# "-" will be replaced to "_" (in composer command)
# YOU NEED SET PROJECT_ENV_PATH_FORCE
#AWS_UPDATE_TASK="ecs-cli compose --project-name sample -SERVICES- create --ecs-profile sample_user"
#AWS_UPDATE_ENV="scp $PROJECT_ENV_PATH_FORCE/.env-compiled sample-user@server:/drive/project/docker/.env"
